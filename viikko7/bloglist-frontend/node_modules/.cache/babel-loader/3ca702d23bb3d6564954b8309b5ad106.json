{"ast":null,"code":"import _regeneratorRuntime from \"/home/eero/sites/fullstackwebsovelluskehitys/viikko7/bloglist-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/eero/sites/fullstackwebsovelluskehitys/viikko7/bloglist-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport blogService from '../services/blogs';\nexport var initializeBlogs = function initializeBlogs(blogs) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch({\n                  type: 'INIT',\n                  data: blogs\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var addBlogAction =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(blog) {\n    var createdBlog;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return blogService.create(blog);\n\n          case 2:\n            createdBlog = _context3.sent;\n            return _context3.abrupt(\"return\",\n            /*#__PURE__*/\n            function () {\n              var _ref3 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee2(dispatch) {\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        dispatch({\n                          type: 'ADD',\n                          data: createdBlog\n                        });\n                        return _context2.abrupt(\"return\", createdBlog);\n\n                      case 2:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function (_x3) {\n                return _ref3.apply(this, arguments);\n              };\n            }());\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function addBlogAction(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var likeBlogAction = function likeBlogAction(blog) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                dispatch({\n                  type: 'LIKE',\n                  data: blog\n                });\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var removeBlogAction = function removeBlogAction(blog) {\n  blogService.remove(blog);\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return dispatch({\n                  type: 'REMOVE',\n                  data: blog\n                });\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar blogReducer = function blogReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INIT':\n      return action.data;\n\n    case 'ADD':\n      return state.concat(action.data);\n\n    case 'LIKE':\n      return state.map(function (b) {\n        return b.id === action.data.id ? action.data : b;\n      });\n\n    case 'REMOVE':\n      return state.filter(function (blog) {\n        return blog.id !== action.data.id;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default blogReducer;","map":{"version":3,"sources":["/home/eero/sites/fullstackwebsovelluskehitys/viikko7/bloglist-frontend/src/reducers/blogReducer.js"],"names":["blogService","initializeBlogs","blogs","dispatch","type","data","addBlogAction","blog","create","createdBlog","likeBlogAction","removeBlogAction","remove","blogReducer","state","action","concat","map","b","id","filter"],"mappings":"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","sourcesContent":["import blogService from '../services/blogs'\n\nexport const initializeBlogs = (blogs) => {\n  return async dispatch => {\n    dispatch({\n      type: 'INIT',\n      data: blogs\n    })\n  }\n}\nexport const addBlogAction = async (blog) => {\n  const createdBlog = await blogService.create(blog)\n  return async dispatch => {\n    dispatch({\n      type: 'ADD',\n      data: createdBlog\n    })\n    return createdBlog\n  }\n}\nexport const likeBlogAction = (blog) => {\n  return async dispatch => {\n    dispatch({\n      type: 'LIKE',\n      data: blog\n    })\n  }\n}\n\nexport const removeBlogAction = (blog) => {\n  blogService.remove(blog)\n  return async dispatch => {\n    await dispatch({\n      type: 'REMOVE',\n      data: blog\n    })\n  }\n}\n\nconst blogReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'INIT':\n      return action.data\n    case 'ADD':\n      return state.concat(action.data)\n    case 'LIKE':\n      return state.map(b => b.id === action.data.id ? action.data : b)\n    case 'REMOVE':\n      return state.filter(blog => blog.id !== action.data.id)\n    default:\n      return state\n  }\n}\n\nexport default blogReducer\n\n"]},"metadata":{},"sourceType":"module"}